"use client";

import { useEffect, useRef, useState } from "react";
import * as d3 from "d3";
import { Button } from "@/components/ui/button";
import { ZoomIn, ZoomOut, RefreshCw } from "lucide-react";
import { ChromosomeData, SyntenyData } from "../types";
import { cn } from "@/lib/utils";
import { motion, AnimatePresence } from "framer-motion";
import { useDebounce } from "use-debounce";

interface ChromosomeSyntenyProps {
  referenceData: ChromosomeData[];
  syntenyData: SyntenyData[];
  width?: number;
  height?: number;
}

// Add biological constants
const CHROMOSOME_CONFIG = {
  HEIGHT: 24,
  SPACING: 15,
  TELOMERE_RADIUS: 12,
  CENTROMERE_WIDTH: 20,
  CENTROMERE_INDENT: 6,
} as const;

// Color configuration for biological meaning
const SYNTENY_COLORS = {
  FORWARD: '#2563eb33', // Light blue with transparency for forward blocks
  REVERSE: '#dc262633', // Light red with transparency for reverse blocks
  BLOCK_FORWARD: '#2563eb', // Solid blue for forward strand borders
  BLOCK_REVERSE: '#dc2626', // Solid red for reverse strand borders
  OPACITY: 0.35,
  HOVER_OPACITY: 0.7,
} as const;

// Enhanced chromosome tooltip with more biological context
function getChromosomeTooltip(chr: ChromosomeData): string {
  const mbSize = (chr.chr_size_bp / 1_000_000).toFixed(2);
  const centromerePos = chr.centromere_start 
    ? `${(chr.centromere_start / 1_000_000).toFixed(2)}-${(chr.centromere_end! / 1_000_000).toFixed(2)} Mb`
    : 'Acrocentric';
  
  return `
    ${chr.species_name} Chr${chr.chr_id}
    ─────────────────
    Type: ${chr.chr_type}
    Length: ${mbSize} Mb
    Centromere: ${centromerePos}
    Structure: ${chr.centromere_start ? 'Metacentric/Submetacentric' : 'Acrocentric'}
  `;
}

// Enhanced synteny tooltip with biological significance
function getSyntenyTooltip(link: SyntenyData): string {
  const refMb = {
    start: (link.ref_start / 1_000_000).toFixed(2),
    end: (link.ref_end / 1_000_000).toFixed(2)
  };
  const queryMb = {
    start: (link.query_start / 1_000_000).toFixed(2),
    end: (link.query_end / 1_000_000).toFixed(2)
  };
  const size = ((link.ref_end - link.ref_start) / 1_000_000).toFixed(2);
  
  return `
    Syntenic Block
    ─────────────────
    Reference: ${link.ref_species} Chr${link.ref_chr}
    Position: ${refMb.start}-${refMb.end} Mb
    
    Query: ${link.query_name} Chr${link.query_chr}
    Position: ${queryMb.start}-${queryMb.end} Mb
    
    Properties:
    • Size: ${size} Mb
    • Orientation: ${link.query_strand === '+' ? 'Forward ➜' : 'Reverse ⟲'}
    • Conservation: ${calculateConservation(size)}
  `;
}

// Helper function to categorize synteny block size
function calculateConservation(sizeMb: number): string {
  if (sizeMb > 10) return 'Large conserved block';
  if (sizeMb > 5) return 'Medium conserved block';
  if (sizeMb > 1) return 'Small conserved block';
  return 'Micro-synteny';
}

export function ChromosomeSynteny({
  referenceData,
  syntenyData,
  width = 1400,
  height = 800,
}: ChromosomeSyntenyProps) {
  const svgRef = useRef<SVGSVGElement>(null);
  const [zoom, setZoom] = useState(1);
  const [hoverInfo, setHoverInfo] = useState<{
    x: number;
    y: number;
    content: string;
  } | null>(null);
  const [alignmentFilter, setAlignmentFilter] = useState<'all' | 'forward' | 'reverse'>('all');
  const [debouncedHoverInfo] = useDebounce(hoverInfo, 50); // Debounce hover info updates

  const filterSyntenyData = (data: SyntenyData[]) => {
    switch (alignmentFilter) {
      case 'forward':
        return data.filter(link => link.query_strand === '+');
      case 'reverse':
        return data.filter(link => link.query_strand === '-');
      default:
        return data;
    }
  };

  useEffect(() => {
    if (!svgRef.current) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove();

    const margin = { top: 60, right: 40, bottom: 60, left: 120 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    const g = svg
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    // Group data by species
    const speciesGroups = d3.group(referenceData, d => d.species_name);
    const uniqueSpecies = Array.from(speciesGroups.keys());

    // Calculate layout parameters
    const speciesSpacing = innerHeight / (uniqueSpecies.length + 1);
    const chromosomeHeight = 20;
    const chromosomeSpacing = 10;

    // Create color scale for ribbons
    const colorScale = d3.scaleOrdinal(d3.schemeCategory10);

    // Calculate max chromosome size for scaling
    const maxChrSize = d3.max(referenceData, d => d.chr_size_bp) || 0;
    const xScale = d3.scaleLinear()
      .domain([0, maxChrSize])
      .range([0, innerWidth - 100]); // Leave space for labels

    // Add new color scales for species and chromosomes
    const speciesColorScale = d3.scaleOrdinal(d3.schemeSet3);
    const chromosomeColorScale = d3.scaleLinear<string>()
      .domain([0, 1])
      .range(['#e2e8f0', '#94a3b8']); // Light to darker shade for chromosomes

    // Draw chromosomes for each species
    uniqueSpecies.forEach((species, speciesIndex) => {
      const speciesColor = speciesColorScale(species);
      const speciesData = referenceData.filter(d => d.species_name === species);
      const y = speciesIndex * speciesSpacing + speciesSpacing;

      // Species label
      g.append("text")
        .attr("x", -10)
        .attr("y", y + chromosomeHeight/2)
        .attr("text-anchor", "end")
        .attr("dominant-baseline", "middle")
        .attr("font-size", "14px")
        .attr("font-family", "var(--font-geist-mono)")
        .attr("class", "text-foreground")
        .attr("fill", "currentColor")
        .text(species.replace("_", " "));

      // Draw chromosomes
      let xOffset = 0;
      speciesData.forEach((chr, i) => {
        const chrWidth = xScale(chr.chr_size_bp);
        const chrPath = d3.path();
        
        // Calculate dimensions
        const roundedEnd = chromosomeHeight / 2;
        const centromereWidth = chromosomeHeight * 0.8;
        const centromereIndent = chromosomeHeight * 0.2;
        
        // Start path at left telomere
        chrPath.moveTo(xOffset + roundedEnd, y);
        
        // Draw top line to centromere
        if (chr.centromere_start && chr.centromere_end) {
          const centromereStart = xOffset + xScale(chr.centromere_start);
          const centromereEnd = xOffset + xScale(chr.centromere_end);
          const centromereMiddle = (centromereStart + centromereEnd) / 2;
          
          chrPath.lineTo(centromereStart, y);
          chrPath.lineTo(centromereMiddle - centromereWidth/2, y + centromereIndent);
          chrPath.lineTo(centromereMiddle + centromereWidth/2, y + centromereIndent);
          chrPath.lineTo(centromereEnd, y);
        }
        
        // Continue to right telomere
        chrPath.lineTo(xOffset + chrWidth - roundedEnd, y);
        
        // Draw right telomere
        chrPath.arc(
          xOffset + chrWidth - roundedEnd,
          y + roundedEnd,
          roundedEnd,
          -Math.PI/2,
          Math.PI/2
        );
        
        // Draw bottom line back to start
        if (chr.centromere_start && chr.centromere_end) {
          const centromereStart = xOffset + xScale(chr.centromere_start);
          const centromereEnd = xOffset + xScale(chr.centromere_end);
          const centromereMiddle = (centromereStart + centromereEnd) / 2;
          
          chrPath.lineTo(centromereEnd, y + chromosomeHeight);
          chrPath.lineTo(centromereMiddle + centromereWidth/2, y + chromosomeHeight - centromereIndent);
          chrPath.lineTo(centromereMiddle - centromereWidth/2, y + chromosomeHeight - centromereIndent);
          chrPath.lineTo(centromereStart, y + chromosomeHeight);
        } else {
          chrPath.lineTo(xOffset + roundedEnd, y + chromosomeHeight);
        }
        
        // Draw left telomere
        chrPath.arc(
          xOffset + roundedEnd,
          y + roundedEnd,
          roundedEnd,
          Math.PI/2,
          -Math.PI/2
        );
        
        // Close path
        chrPath.closePath();
        
        // Draw chromosome body
        g.append("path")
          .attr("d", chrPath.toString())
          .attr("class", "chromosome-body")
          .attr("data-chr", chr.chr_id)
          .attr("data-species", species)
          .attr("fill", speciesColor)
          .attr("stroke", d3.color(speciesColor)?.darker(0.5))
          .attr("stroke-width", 1.5)
          .attr("stroke-linejoin", "round")
          .style("transition", "opacity 0.2s ease-in-out");
        
        // Add chromosome bands if present
        if (chr.centromere_start && chr.centromere_end) {
          const centromereStart = xOffset + xScale(chr.centromere_start);
          const centromereEnd = xOffset + xScale(chr.centromere_end);
          const centromereMiddle = (centromereStart + centromereEnd) / 2;
          
          g.append("path")
            .attr("d", `M ${centromereStart} ${y} 
                        L ${centromereMiddle - centromereWidth/2} ${y + centromereIndent}
                        L ${centromereMiddle + centromereWidth/2} ${y + centromereIndent}
                        L ${centromereEnd} ${y}
                        L ${centromereEnd} ${y + chromosomeHeight}
                        L ${centromereMiddle + centromereWidth/2} ${y + chromosomeHeight - centromereIndent}
                        L ${centromereMiddle - centromereWidth/2} ${y + chromosomeHeight - centromereIndent}
                        L ${centromereStart} ${y + chromosomeHeight} Z`)
            .attr("fill", d3.color(speciesColor)?.darker(0.3)) // Slightly darker for centromere
            .attr("stroke", "none");
        }

        // Chromosome label with improved positioning
        g.append("text")
          .attr("x", xOffset + chrWidth/2)
          .attr("y", y - roundedEnd - 5)
          .attr("text-anchor", "middle")
          .attr("font-size", "12px")
          .attr("font-weight", "500")
          .attr("class", "text-foreground")
          .attr("fill", "currentColor")
          .text(chr.chr_id);

        xOffset += chrWidth + chromosomeSpacing * 2; // Increased spacing between chromosomes
      });
    });

    // Modified ribbon drawing code
    const filteredSyntenyData = filterSyntenyData(syntenyData);
    filteredSyntenyData.forEach(link => {
      // Add logging to debug what connections are being drawn
      console.log('Drawing synteny link:', link);

      const sourceSpecies = link.ref_species;
      const targetSpecies = link.query_name;
      
      if (!sourceSpecies || !targetSpecies) {
        console.log('Skipping link due to missing species:', link);
        return;
      }

      const sourceIndex = uniqueSpecies.indexOf(sourceSpecies);
      const targetIndex = uniqueSpecies.indexOf(targetSpecies);
      
      if (sourceIndex === -1 || targetIndex === -1) {
        console.log('Skipping link due to species not found in display:', {
          sourceSpecies,
          targetSpecies,
          sourceIndex,
          targetIndex
        });
        return;
      }

      // Calculate positions
      const sourceY = sourceIndex * speciesSpacing + speciesSpacing;
      const targetY = targetIndex * speciesSpacing + speciesSpacing;

      // Get chromosome positions
      const getXPosition = (species: string, chr: string, pos: number) => {
        const speciesChrs = referenceData.filter(d => d.species_name === species);
        let xPos = 0;
        for (const chromosome of speciesChrs) {
          if (chromosome.chr_id === chr) {
            return xPos + xScale(pos);
          }
          xPos += xScale(chromosome.chr_size_bp) + chromosomeSpacing * 2;
        }
        return 0;
      };

      // Calculate ribbon positions
      const x1 = getXPosition(sourceSpecies, link.ref_chr, link.ref_start);
      const x2 = getXPosition(targetSpecies, link.query_chr, link.query_start);
      const width1 = xScale(link.ref_end - link.ref_start);
      const width2 = xScale(link.query_end - link.query_start);

      // Create gradient for smooth color transition
      const gradientId = `gradient-${link.ref_chr}-${link.query_chr}`;
      const gradient = g.append("defs")
        .append("linearGradient")
        .attr("id", gradientId)
        .attr("gradientUnits", "userSpaceOnUse")
        .attr("x1", x1)
        .attr("y1", sourceY)
        .attr("x2", x2)
        .attr("y2", targetY);

      gradient.append("stop")
        .attr("offset", "0%")
        .attr("stop-color", speciesColorScale(sourceSpecies));

      gradient.append("stop")
        .attr("offset", "100%")
        .attr("stop-color", speciesColorScale(targetSpecies));

      // Draw matching blocks on chromosomes
      // Source block
      const sourceBlock = g.append("rect")
        .attr("x", x1)
        .attr("y", sourceY)
        .attr("width", width1)
        .attr("height", CHROMOSOME_CONFIG.HEIGHT)
        .attr("fill", link.query_strand === '+' ? SYNTENY_COLORS.FORWARD : SYNTENY_COLORS.REVERSE)
        .attr("stroke", link.query_strand === '+' ? SYNTENY_COLORS.BLOCK_FORWARD : SYNTENY_COLORS.BLOCK_REVERSE)
        .attr("stroke-width", 2)
        .attr("class", "matching-block source")
        .attr("data-link-id", `${link.ref_chr}-${link.query_chr}`);

      // Target block
      const targetBlock = g.append("rect")
        .attr("x", x2)
        .attr("y", targetY)
        .attr("width", width2)
        .attr("height", CHROMOSOME_CONFIG.HEIGHT)
        .attr("fill", link.query_strand === '+' ? SYNTENY_COLORS.FORWARD : SYNTENY_COLORS.REVERSE)
        .attr("stroke", link.query_strand === '+' ? SYNTENY_COLORS.BLOCK_FORWARD : SYNTENY_COLORS.BLOCK_REVERSE)
        .attr("stroke-width", 2)
        .attr("class", "matching-block target")
        .attr("data-link-id", `${link.ref_chr}-${link.query_chr}`);

      // Draw connecting ribbon between blocks
      const path = d3.path();
      path.moveTo(x1, sourceY);
      path.lineTo(x1 + width1, sourceY);
      path.bezierCurveTo(
        x1 + width1,
        (sourceY + targetY)/2,
        x2 + width2,
        (sourceY + targetY)/2,
        x2 + width2,
        targetY
      );
      path.lineTo(x2, targetY);
      path.bezierCurveTo(
        x2,
        (sourceY + targetY)/2,
        x1,
        (sourceY + targetY)/2,
        x1,
        sourceY
      );
      path.closePath();

      // Get the query species color
      const querySpecies = link.query_name;
      const ribbonColor = speciesColorScale(querySpecies);

      // Add the connecting ribbon with updated styling
      const ribbon = g.append("path")
        .attr("d", path.toString())
        .attr("fill", ribbonColor) // Use species color
        .attr("stroke", "none")
        .attr("opacity", SYNTENY_COLORS.OPACITY)
        .attr("class", "synteny-ribbon")
        .attr("data-link-id", `${link.ref_chr}-${link.query_chr}`)
        .style("transition", "all 0.2s ease-in-out");

      // Add hover interactions
      const handleMouseOver = (event: any, link: SyntenyData) => {
        const linkId = event.target.getAttribute("data-link-id");
        
        // Dim all elements
        d3.selectAll(".matching-block, .synteny-ribbon")
          .attr("opacity", 0.1);
        
        // Highlight related elements
        d3.selectAll(`[data-link-id="${linkId}"]`)
          .attr("opacity", SYNTENY_COLORS.HOVER_OPACITY);
        
        d3.select(event.currentTarget)
          .attr("stroke-width", 3);

        setHoverInfo({
          x: event.pageX,
          y: event.pageY,
          content: getSyntenyTooltip(link)
        });
      };

      const handleMouseOut = () => {
        // Reset opacity
        d3.selectAll(".matching-block")
          .attr("opacity", 1)
          .attr("stroke-width", 2);
        d3.selectAll(".synteny-ribbon")
          .attr("opacity", SYNTENY_COLORS.OPACITY);
        
        setHoverInfo(null);
      };

      // Update the event listeners for blocks and ribbon
      [sourceBlock, targetBlock, ribbon].forEach(element => {
        element
          .on("mouseover", (event) => handleMouseOver(event, link))
          .on("mouseout", handleMouseOut);
      });
    });

    // Add hover effects for chromosomes
    g.selectAll("path.chromosome")
      .on("mouseover", (event, d: ChromosomeData) => {
        setHoverInfo({
          x: event.pageX,
          y: event.pageY,
          content: getChromosomeTooltip(d)
        });
      })
      .on("mousemove", (event) => {
        setHoverInfo(prev => prev ? {
          ...prev,
          x: event.pageX,
          y: event.pageY
        } : null);
      })
      .on("mouseout", () => {
        setHoverInfo(null);
      });

    // Add zoom behavior
    const zoomBehavior = d3.zoom()
      .scaleExtent([0.5, 5])
      .on("zoom", (event) => {
        g.attr("transform", event.transform);
        setZoom(event.transform.k);
      });

    svg.call(zoomBehavior as any);

  }, [referenceData, syntenyData, width, height, alignmentFilter]);

  return (
    <div className="relative">
      <div className="absolute top-4 right-4 flex gap-2">
        <div className="flex gap-2 mr-4">
          <Button
            variant={alignmentFilter === 'all' ? 'default' : 'outline'}
            onClick={() => setAlignmentFilter('all')}
            className="text-xs"
          >
            All Alignments
          </Button>
          <Button
            variant={alignmentFilter === 'forward' ? 'default' : 'outline'}
            onClick={() => setAlignmentFilter('forward')}
            className="text-xs"
          >
            Forward Only
          </Button>
          <Button
            variant={alignmentFilter === 'reverse' ? 'default' : 'outline'}
            onClick={() => setAlignmentFilter('reverse')}
            className="text-xs"
          >
            Reverse Only
          </Button>
        </div>
        <div className="flex gap-2 border-l pl-4">
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              if (!svgRef.current) return;
              const zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .on("zoom", (event) => {
                  const g = d3.select(svgRef.current).select("g");
                  g.attr("transform", event.transform);
                  setZoom(event.transform.k);
                });
              
              d3.select(svgRef.current)
                .transition()
                .duration(750)
                .call(zoom.scaleBy, 1.2);
            }}
          >
            <ZoomIn className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              if (!svgRef.current) return;
              const zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .on("zoom", (event) => {
                  const g = d3.select(svgRef.current).select("g");
                  g.attr("transform", event.transform);
                  setZoom(event.transform.k);
                });
              
              d3.select(svgRef.current)
                .transition()
                .duration(750)
                .call(zoom.scaleBy, 0.8);
            }}
          >
            <ZoomOut className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              if (!svgRef.current) return;
              const zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .on("zoom", (event) => {
                  const g = d3.select(svgRef.current).select("g");
                  g.attr("transform", event.transform);
                  setZoom(event.transform.k);
                });
              
              d3.select(svgRef.current)
                .transition()
                .duration(750)
                .call(zoom.transform, d3.zoomIdentity);
            }}
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <svg
        ref={svgRef}
        width={width}
        height={height}
        className="bg-background border rounded-lg"
      />
      
      <AnimatePresence>
        {debouncedHoverInfo && (
          <motion.div
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 5 }}
            transition={{ duration: 0.15 }}
            className="fixed z-50 pointer-events-none"
            style={{
              left: debouncedHoverInfo.x,
              top: debouncedHoverInfo.y,
            }}
          >
            <div
              className={cn(
                "bg-popover text-popover-foreground",
                "rounded-md shadow-md border",
                "px-4 py-3 max-w-[320px]",
                "font-mono text-sm whitespace-pre-line"
              )}
              style={{
                transform: 'translate(10px, -50%)',
              }}
            >
              {debouncedHoverInfo.content}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}