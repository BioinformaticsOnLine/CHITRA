"use client";

import { useEffect, useRef, useState, useCallback } from "react";
import * as d3 from "d3";
import { Button } from "@/components/ui/button";
import { ZoomIn, ZoomOut, RefreshCw, Maximize2, Minimize2 } from "lucide-react";
import { ChromosomeData, SyntenyData } from "../types";
import { cn } from "@/lib/utils";
import { motion, AnimatePresence } from "framer-motion";
import { useDebounce } from "use-debounce";
import { useEventListener } from "@/hooks/use-event-listener";

interface ChromosomeSyntenyProps {
  referenceData: ChromosomeData[];
  syntenyData: SyntenyData[];
  geneAnnotations: GeneAnnotation[];
  width?: number;
  height?: number;
}

// Add biological constants
const CHROMOSOME_CONFIG = {
  HEIGHT: 24,
  SPACING: 15,
  TELOMERE_RADIUS: 12,
  CENTROMERE_WIDTH: 20,
  CENTROMERE_INDENT: 6,
} as const;

// Color configuration for biological meaning
const SYNTENY_COLORS = {
  FORWARD: '#2563eb1a', // Lighter blue with less opacity
  REVERSE: '#dc26261a', // Lighter red with less opacity
  BLOCK_FORWARD: '#2563eb',
  BLOCK_REVERSE: '#dc2626',
  STROKE_WIDTH: {
    SMALL: 1.5,  // For blocks > 10Mb
    MEDIUM: 2.5, // For blocks 5-10Mb
    LARGE: 3.5   // For blocks < 5Mb
  },
  OPACITY: {
    DEFAULT: 0.2,
    HOVER: 0.8,
    ACTIVE: 0.9
  }
} as const;

// First, add these constants near the top with other configurations
const GENE_TYPE_COLORS = {
  gene: '#4ade80',       // Green
  exon: '#2563eb',       // Blue
  CDS: '#f43f5e',        // Red
  pseudogene: '#a855f7'  // Purple
} as const;

// Add this interface for gene annotations
interface GeneAnnotation {
  chromosome: string;
  start: number;
  end: number;
  name: string;
  strand: string;
  source: string;
  type: keyof typeof GENE_TYPE_COLORS;
}

// Updated chromosome tooltip with optional centromere info
function getChromosomeTooltip(chr: ChromosomeData): string {
  const mbSize = (chr.chr_size_bp / 1_000_000).toFixed(2);
  const centromereInfo = chr.centromere_start && chr.centromere_end
    ? `${(chr.centromere_start / 1_000_000).toFixed(2)}-${(chr.centromere_end / 1_000_000).toFixed(2)} Mb`
    : 'Not Available';
  
  return `
    ${chr.species_name} ${chr.chr_id}
    ─────────────────
    Type: ${chr.chr_type || 'Unknown'}
    Length: ${mbSize} Mb
    ${chr.centromere_start ? `Centromere: ${centromereInfo}` : ''}
    ${chr.centromere_start ? `Structure: ${chr.centromere_start ? 'Metacentric/Submetacentric' : 'Acrocentric'}` : ''}
  `.trim();
}

// Updated synteny tooltip without chr repetition
function getSyntenyTooltip(link: SyntenyData): string {
  const refMb = {
    start: (link.ref_start / 1_000_000).toFixed(2),
    end: (link.ref_end / 1_000_000).toFixed(2)
  };
  const queryMb = {
    start: (link.query_start / 1_000_000).toFixed(2),
    end: (link.query_end / 1_000_000).toFixed(2)
  };
  const size = ((link.ref_end - link.ref_start) / 1_000_000).toFixed(2);
  
  return `
    Syntenic Block
    ─────────────────
    Reference: ${link.ref_species} ${link.ref_chr}
    Position: ${refMb.start}-${refMb.end} Mb
    
    Query: ${link.query_name} ${link.query_chr}
    Position: ${queryMb.start}-${queryMb.end} Mb
    
    Properties:
    • Size: ${size} Mb
    • Orientation: ${link.query_strand === '+' ? 'Forward ➜' : 'Reverse ⟲'}
    • Conservation: ${calculateConservation(size)}
  `;
}

// Helper function to categorize synteny block size
function calculateConservation(sizeMb: number): string {
  if (sizeMb > 10) return 'Large conserved block';
  if (sizeMb > 5) return 'Medium conserved block';
  if (sizeMb > 1) return 'Small conserved block';
  return 'Micro-synteny';
}

interface ViewportRect {
  x: number;
  y: number;
  width: number;
  height: number;
}

interface Dimensions {
  width: number;
  height: number;
}

export function ChromosomeSynteny({
  referenceData,
  syntenyData,
  geneAnnotations,
  width: initialWidth = 1400,
  height: initialHeight = 800,
}: ChromosomeSyntenyProps) {
  const svgRef = useRef<SVGSVGElement>(null);
  const [zoom, setZoom] = useState(1);
  const [tooltipInfo, setTooltipInfo] = useState<{
    x: number;
    y: number;
    content: string;
    isOpen: boolean;
  } | null>(null);
  const [alignmentFilter, setAlignmentFilter] = useState<'all' | 'forward' | 'reverse'>('all');
  const [debouncedHoverInfo] = useDebounce(tooltipInfo, 50); // Debounce hover info updates
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [viewportRect, setViewportRect] = useState<ViewportRect>({
    x: 0,
    y: 0,
    width: initialWidth,
    height: initialHeight
  });
  const miniMapRef = useRef<SVGSVGElement>(null);
  const miniMapWidth = 200;
  const miniMapHeight = 150;
  const zoomBehaviorRef = useRef<any>(null);
  const [dimensions, setDimensions] = useState<Dimensions>({
    width: initialWidth,
    height: initialHeight
  });
  const containerRef = useRef<HTMLDivElement>(null);

  const filterSyntenyData = (data: SyntenyData[]) => {
    switch (alignmentFilter) {
      case 'forward':
        return data.filter(link => link.query_strand === '+');
      case 'reverse':
        return data.filter(link => link.query_strand === '-');
      default:
        return data;
    }
  };

  const handleFullscreenChange = useCallback(() => {
    const isFullscreenNow = Boolean(document.fullscreenElement);
    setIsFullscreen(isFullscreenNow);
    
    if (isFullscreenNow && containerRef.current) {
      // Get screen dimensions
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      
      // Calculate dimensions maintaining aspect ratio
      const aspectRatio = initialWidth / initialHeight;
      let newWidth = screenWidth;
      let newHeight = screenWidth / aspectRatio;
      
      if (newHeight > screenHeight) {
        newHeight = screenHeight;
        newWidth = screenHeight * aspectRatio;
      }
      
      setDimensions({
        width: newWidth,
        height: newHeight
      });
    } else {
      // Reset to initial dimensions
      setDimensions({
        width: initialWidth,
        height: initialHeight
      });
    }
  }, [initialWidth, initialHeight]);

  const handleResize = useCallback(() => {
    if (isFullscreen && containerRef.current) {
      handleFullscreenChange();
    }
  }, [isFullscreen, handleFullscreenChange]);

  useEventListener('fullscreenchange', handleFullscreenChange);
  useEventListener('resize', handleResize);

  const toggleFullscreen = async () => {
    try {
      if (!document.fullscreenElement) {
        await containerRef.current?.requestFullscreen();
      } else {
        await document.exitFullscreen();
      }
    } catch (err) {
      console.error('Error toggling fullscreen:', err);
    }
  };

  const updateViewportRect = (transform: d3.ZoomTransform) => {
    const scale = transform.k;
    const x = -transform.x / scale;
    const y = -transform.y / scale;
    const viewWidth = dimensions.width / scale;
    const viewHeight = dimensions.height / scale;

    setViewportRect({
      x,
      y,
      width: viewWidth,
      height: viewHeight
    });
  };

  const handleElementHover = (event: any, content: string) => {
    setTooltipInfo({
      x: event.clientX,
      y: event.clientY,
      content,
      isOpen: true
    });
  };

  const handleElementLeave = () => {
    setTooltipInfo(prev => prev ? { ...prev, isOpen: false } : null);
  };

  const handleElementMove = (event: any) => {
    if (tooltipInfo) {
      setTooltipInfo(prev => ({
        ...prev!,
        x: event.clientX,
        y: event.clientY,
      }));
    }
  };

  const handleMouseOver = (event: any, link: SyntenyData) => {
    // Show tooltip
    handleElementHover(event, getSyntenyTooltip(link));
    
    // Highlight the synteny blocks and ribbon
    const svg = d3.select(svgRef.current);
    
    // Highlight the ribbon
    svg.selectAll(`.synteny-ribbon[data-link-id="${link.ref_chr}-${link.query_chr}"]`)
      .attr("opacity", SYNTENY_COLORS.OPACITY.HOVER)
      .raise();

    // Highlight both source and target blocks
    svg.selectAll(`.matching-block[data-link-id="${link.ref_chr}-${link.query_chr}"]`)
      .attr("opacity", 1)
      .attr("stroke-width", 3);
  };

  const handleMouseOut = () => {
    handleElementLeave();
    
    // Reset all visual states
    const svg = d3.select(svgRef.current);
    
    // Reset ribbons
    svg.selectAll(".synteny-ribbon")
      .attr("opacity", SYNTENY_COLORS.OPACITY.DEFAULT);
    
    // Reset blocks
    svg.selectAll(".matching-block")
      .attr("opacity", 0.8)
      .attr("stroke-width", 2);
  };

  useEffect(() => {
    if (!svgRef.current) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove();

    const margin = { top: 60, right: 40, bottom: 60, left: 120 };
    const innerWidth = dimensions.width - margin.left - margin.right;
    const innerHeight = dimensions.height - margin.top - margin.bottom;

    const g = svg
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    // Group data by species
    const speciesGroups = d3.group(referenceData, d => d.species_name);
    const uniqueSpecies = Array.from(speciesGroups.keys());

    // Calculate layout parameters
    const speciesSpacing = innerHeight / (uniqueSpecies.length + 1);
    const chromosomeHeight = 20;
    const chromosomeSpacing = 10;

    // Create color scale for ribbons
    const colorScale = d3.scaleOrdinal(d3.schemeCategory10);

    // Calculate max chromosome size for scaling
    const maxChrSize = d3.max(referenceData, d => d.chr_size_bp) || 0;
    const xScale = d3.scaleLinear()
      .domain([0, maxChrSize])
      .range([0, innerWidth - 100]); // Leave space for labels

    // Add new color scales for species and chromosomes
    const speciesColorScale = d3.scaleOrdinal(d3.schemeSet3);
    const chromosomeColorScale = d3.scaleLinear<string>()
      .domain([0, 1])
      .range(['#e2e8f0', '#94a3b8']); // Light to darker shade for chromosomes

    // Draw chromosomes for each species
    uniqueSpecies.forEach((species, speciesIndex) => {
      const speciesColor = speciesColorScale(species);
      const speciesData = referenceData.filter(d => d.species_name === species);
      const y = speciesIndex * speciesSpacing + speciesSpacing;

      // Species label
      g.append("text")
        .attr("x", -10)
        .attr("y", y + chromosomeHeight/2)
        .attr("text-anchor", "end")
        .attr("dominant-baseline", "middle")
        .attr("font-size", "14px")
        .attr("font-family", "var(--font-geist-mono)")
        .attr("class", "text-foreground")
        .attr("fill", "currentColor")
        .text(species.replace("_", " "));

      // Draw chromosomes
      let xOffset = 0;
      speciesData.forEach((chr, i) => {
        const chrWidth = xScale(chr.chr_size_bp);
        const chrPath = d3.path();
        
        // Calculate dimensions
        const roundedEnd = chromosomeHeight / 2;
        const centromereWidth = chromosomeHeight * 0.8;
        const centromereIndent = chromosomeHeight * 0.2;
        
        // Start path at left telomere
        chrPath.moveTo(xOffset + roundedEnd, y);
        
        // Draw top line to centromere
        if (chr.centromere_start && chr.centromere_end) {
          const centromereStart = xOffset + xScale(chr.centromere_start);
          const centromereEnd = xOffset + xScale(chr.centromere_end);
          const centromereMiddle = (centromereStart + centromereEnd) / 2;
          
          chrPath.lineTo(centromereStart, y);
          chrPath.lineTo(centromereMiddle - centromereWidth/2, y + centromereIndent);
          chrPath.lineTo(centromereMiddle + centromereWidth/2, y + centromereIndent);
          chrPath.lineTo(centromereEnd, y);
        }
        
        // Continue to right telomere
        chrPath.lineTo(xOffset + chrWidth - roundedEnd, y);
        
        // Draw right telomere
        chrPath.arc(
          xOffset + chrWidth - roundedEnd,
          y + roundedEnd,
          roundedEnd,
          -Math.PI/2,
          Math.PI/2
        );
        
        // Draw bottom line back to start
        if (chr.centromere_start && chr.centromere_end) {
          const centromereStart = xOffset + xScale(chr.centromere_start);
          const centromereEnd = xOffset + xScale(chr.centromere_end);
          const centromereMiddle = (centromereStart + centromereEnd) / 2;
          
          chrPath.lineTo(centromereEnd, y + chromosomeHeight);
          chrPath.lineTo(centromereMiddle + centromereWidth/2, y + chromosomeHeight - centromereIndent);
          chrPath.lineTo(centromereMiddle - centromereWidth/2, y + chromosomeHeight - centromereIndent);
          chrPath.lineTo(centromereStart, y + chromosomeHeight);
        } else {
          chrPath.lineTo(xOffset + roundedEnd, y + chromosomeHeight);
        }
        
        // Draw left telomere
        chrPath.arc(
          xOffset + roundedEnd,
          y + roundedEnd,
          roundedEnd,
          Math.PI/2,
          -Math.PI/2
        );
        
        // Close path
        chrPath.closePath();
        
        // Draw chromosome body
        g.append("path")
          .attr("d", chrPath.toString())
          .attr("class", "chromosome-body")
          .attr("data-chr", chr.chr_id)
          .attr("data-species", species)
          .attr("fill", speciesColor)
          .attr("stroke", d3.color(speciesColor)?.darker(0.5))
          .attr("stroke-width", 1.5)
          .attr("stroke-linejoin", "round")
          .style("transition", "opacity 0.2s ease-in-out");
        
        // Add chromosome bands if present
        if (chr.centromere_start && chr.centromere_end) {
          const centromereStart = xOffset + xScale(chr.centromere_start);
          const centromereEnd = xOffset + xScale(chr.centromere_end);
          const centromereMiddle = (centromereStart + centromereEnd) / 2;
          
          g.append("path")
            .attr("d", `M ${centromereStart} ${y} 
                        L ${centromereMiddle - centromereWidth/2} ${y + centromereIndent}
                        L ${centromereMiddle + centromereWidth/2} ${y + centromereIndent}
                        L ${centromereEnd} ${y}
                        L ${centromereEnd} ${y + chromosomeHeight}
                        L ${centromereMiddle + centromereWidth/2} ${y + chromosomeHeight - centromereIndent}
                        L ${centromereMiddle - centromereWidth/2} ${y + chromosomeHeight - centromereIndent}
                        L ${centromereStart} ${y + chromosomeHeight} Z`)
            .attr("fill", d3.color(speciesColor)?.darker(0.3)) // Slightly darker for centromere
            .attr("stroke", "none");
        }

        // Chromosome label with improved positioning
        g.append("text")
          .attr("x", xOffset + chrWidth/2)
          .attr("y", y - roundedEnd - 5)
          .attr("text-anchor", "middle")
          .attr("font-size", "12px")
          .attr("font-weight", "500")
          .attr("class", "text-foreground")
          .attr("fill", "currentColor")
          .text(chr.chr_id);

        xOffset += chrWidth + chromosomeSpacing * 2; // Increased spacing between chromosomes
      });
    });

    // Modified ribbon drawing code
    const filteredSyntenyData = filterSyntenyData(syntenyData);
    filteredSyntenyData.forEach(link => {
      // Add logging to debug what connections are being drawn
      console.log('Drawing synteny link:', link);

      const sourceSpecies = link.ref_species;
      const targetSpecies = link.query_name;
      
      if (!sourceSpecies || !targetSpecies) {
        console.log('Skipping link due to missing species:', link);
        return;
      }

      const sourceIndex = uniqueSpecies.indexOf(sourceSpecies);
      const targetIndex = uniqueSpecies.indexOf(targetSpecies);
      
      if (sourceIndex === -1 || targetIndex === -1) {
        console.log('Skipping link due to species not found in display:', {
          sourceSpecies,
          targetSpecies,
          sourceIndex,
          targetIndex
        });
        return;
      }

      // Calculate positions
      const sourceY = sourceIndex * speciesSpacing + speciesSpacing;
      const targetY = targetIndex * speciesSpacing + speciesSpacing;

      // Get chromosome positions
      const getXPosition = (species: string, chr: string, pos: number) => {
        const speciesChrs = referenceData.filter(d => d.species_name === species);
        let xPos = 0;
        for (const chromosome of speciesChrs) {
          if (chromosome.chr_id === chr) {
            // Constrain position within chromosome bounds
            const constrainedPos = Math.min(Math.max(pos, 0), chromosome.chr_size_bp);
            return xPos + xScale(constrainedPos);
          }
          xPos += xScale(chromosome.chr_size_bp) + chromosomeSpacing * 2;
        }
        return 0;
      };

      // Calculate ribbon positions
      const x1 = getXPosition(sourceSpecies, link.ref_chr, link.ref_start);
      const x2 = getXPosition(targetSpecies, link.query_chr, link.query_start);

      // Get the chromosome sizes for width constraints
      const sourceChromosome = referenceData.find(c => 
        c.species_name === sourceSpecies && c.chr_id === link.ref_chr
      );
      const targetChromosome = referenceData.find(c => 
        c.species_name === targetSpecies && c.chr_id === link.query_chr
      );

      // Calculate constrained widths
      const width1 = sourceChromosome ? 
        Math.min(
          xScale(link.ref_end - link.ref_start),
          xScale(sourceChromosome.chr_size_bp) - (x1 - getXPosition(sourceSpecies, link.ref_chr, 0))
        ) : 0;

      const width2 = targetChromosome ? 
        Math.min(
          xScale(link.query_end - link.query_start),
          xScale(targetChromosome.chr_size_bp) - (x2 - getXPosition(targetSpecies, link.query_chr, 0))
        ) : 0;

      // Create gradient for smooth color transition
      const gradientId = `gradient-${link.ref_chr}-${link.query_chr}`;
      const gradient = g.append("defs")
        .append("linearGradient")
        .attr("id", gradientId)
        .attr("gradientUnits", "userSpaceOnUse")
        .attr("x1", x1)
        .attr("y1", sourceY)
        .attr("x2", x2)
        .attr("y2", targetY);

      gradient.append("stop")
        .attr("offset", "0%")
        .attr("stop-color", speciesColorScale(sourceSpecies));

      gradient.append("stop")
        .attr("offset", "100%")
        .attr("stop-color", speciesColorScale(targetSpecies));

      // Draw matching blocks on chromosomes
      // Source block
      const sourceBlock = g.append("rect")
        .attr("x", x1)
        .attr("y", sourceY)
        .attr("width", width1)
        .attr("height", CHROMOSOME_CONFIG.HEIGHT)
        .attr("fill", link.query_strand === '+' ? SYNTENY_COLORS.FORWARD : SYNTENY_COLORS.REVERSE)
        .attr("stroke", link.query_strand === '+' ? SYNTENY_COLORS.BLOCK_FORWARD : SYNTENY_COLORS.BLOCK_REVERSE)
        .attr("stroke-width", 2)
        .attr("class", "matching-block source")
        .attr("data-link-id", `${link.ref_chr}-${link.query_chr}`)
        .attr("opacity", 0.8)
        .style("transition", "all 0.2s ease-in-out");

      // Target block
      const targetBlock = g.append("rect")
        .attr("x", x2)
        .attr("y", targetY)
        .attr("width", width2)
        .attr("height", CHROMOSOME_CONFIG.HEIGHT)
        .attr("fill", link.query_strand === '+' ? SYNTENY_COLORS.FORWARD : SYNTENY_COLORS.REVERSE)
        .attr("stroke", link.query_strand === '+' ? SYNTENY_COLORS.BLOCK_FORWARD : SYNTENY_COLORS.BLOCK_REVERSE)
        .attr("stroke-width", 2)
        .attr("class", "matching-block target")
        .attr("data-link-id", `${link.ref_chr}-${link.query_chr}`)
        .attr("opacity", 0.8)
        .style("transition", "all 0.2s ease-in-out");

      // Draw connecting ribbon between blocks
      const path = d3.path();

      // Update edge positions - always connect to top of reference chromosome
      const sourceEdgeY = sourceY; // Always connect to top edge for reference chromosome
      const targetEdgeY = targetY + (link.query_strand === '+' ? 0 : CHROMOSOME_CONFIG.HEIGHT);

      // Draw the ribbon path
      path.moveTo(x1, sourceEdgeY);
      path.lineTo(x1 + width1, sourceEdgeY);
      path.bezierCurveTo(
        x1 + width1,
        (sourceY + targetY)/2,
        x2 + width2,
        (sourceY + targetY)/2,
        x2 + width2,
        targetEdgeY
      );
      path.lineTo(x2, targetEdgeY);
      path.bezierCurveTo(
        x2,
        (sourceY + targetY)/2,
        x1,
        (sourceY + targetY)/2,
        x1,
        sourceEdgeY
      );
      path.closePath();

      // Get the query species color
      const querySpecies = link.query_name;
      const ribbonColor = speciesColorScale(querySpecies);

      // Calculate stroke width based on block size
      const blockSizeMb = (link.ref_end - link.ref_start) / 1_000_000;
      const strokeWidth = blockSizeMb > 10 
        ? SYNTENY_COLORS.STROKE_WIDTH.SMALL
        : blockSizeMb > 5 
          ? SYNTENY_COLORS.STROKE_WIDTH.MEDIUM 
          : SYNTENY_COLORS.STROKE_WIDTH.LARGE;

      // Update ribbon styling
      const ribbon = g.append("path")
        .attr("d", path.toString())
        .attr("fill", ribbonColor)
        .attr("stroke", "none")
        .attr("opacity", SYNTENY_COLORS.OPACITY.DEFAULT)
        .attr("class", "synteny-ribbon")
        .attr("data-link-id", `${link.ref_chr}-${link.query_chr}`)
        .style("transition", "all 0.2s ease-in-out");

      // Update the hover effects for blocks and ribbons
      ribbon
        .on("mouseover", (event) => handleMouseOver(event, link))
        .on("mouseout", handleMouseOut)
        .on("mousemove", handleElementMove);

      // Add click handler for focusing
      ribbon.on("click", function() {
        // Toggle active state
        const isActive = d3.select(this).classed("active");
        
        // Reset all ribbons
        g.selectAll(".synteny-ribbon")
          .classed("active", false)
          .attr("opacity", SYNTENY_COLORS.OPACITY.DEFAULT);
          
        if (!isActive) {
          d3.select(this)
            .classed("active", true)
            .attr("opacity", SYNTENY_COLORS.OPACITY.ACTIVE)
            .raise(); // Bring to front
        }
      });

      // Source block events
      sourceBlock
        .on("mouseover", (event) => handleMouseOver(event, link))
        .on("mouseout", handleMouseOut)
        .on("mousemove", handleElementMove);

      // Target block events
      targetBlock
        .on("mouseover", (event) => handleMouseOver(event, link))
        .on("mouseout", handleMouseOut)
        .on("mousemove", handleElementMove);
    });

    // Update the chromosome hover events to target the correct elements
    g.selectAll("path.chromosome-body")
      .on("mouseover", (event) => {
        const chr = referenceData.find(c => 
          c.chr_id === event.target.dataset.chr && 
          c.species_name === event.target.dataset.species
        );
        if (chr) {
          handleElementHover(event, getChromosomeTooltip(chr));
        }
      })
      .on("mousemove", handleElementMove)
      .on("mouseout", handleElementLeave);

    // Create and store zoom behavior
    const zoomBehavior = d3.zoom()
      .scaleExtent([0.5, 5])
      .on("zoom", (event) => {
        g.attr("transform", event.transform);
        setZoom(event.transform.k);
        updateViewportRect(event.transform);
      });

    // Store in ref for access from mini-map
    zoomBehaviorRef.current = zoomBehavior;

    svg.call(zoomBehavior as any);

    // Add zoom behavior specifically for chromosomes
    const chromosomeZoom = d3.zoom()
      .scaleExtent([1, 20])
      .on("zoom", (event) => {
        const transform = event.transform;
        g.selectAll(".chromosome-body")
          .attr("transform", transform);
        g.selectAll(".synteny-ribbon")
          .attr("transform", transform);
      });

    // Add zoom controls
    const zoomControls = svg.append("g")
      .attr("class", "zoom-controls")
      .attr("transform", `translate(${margin.left + 10}, ${margin.top + 10})`);

    // Add zoom slider
    const zoomSlider = zoomControls.append("input")
      .attr("type", "range")
      .attr("min", 1)
      .attr("max", 20)
      .attr("step", 0.1)
      .attr("value", 1)
      .style("width", "100px")
      .on("input", function() {
        const scale = this.value;
        chromosomeZoom.scaleTo(svg, scale);
      });

  }, [referenceData, syntenyData, dimensions, alignmentFilter, geneAnnotations]);

  useEffect(() => {
    if (!miniMapRef.current) return;

    const miniMap = d3.select(miniMapRef.current);
    miniMap.selectAll("*").remove();

    const scale = Math.min(
      miniMapWidth / dimensions.width,
      miniMapHeight / dimensions.height
    );

    // Create mini-map background
    miniMap.append("rect")
      .attr("width", dimensions.width * scale)
      .attr("height", dimensions.height * scale)
      .attr("fill", "var(--background)")
      .attr("stroke", "var(--border)")
      .attr("stroke-width", 1);

    // Draw chromosomes in mini-map
    const miniG = miniMap.append("g")
      .attr("transform", `scale(${scale})`);

    // Clone and simplify main visualization for mini-map
    const mainSvg = d3.select(svgRef.current);
    const clone = mainSvg.node()?.cloneNode(true) as SVGElement;
    const simplified = d3.select(clone).select("g");
    
    // Remove unnecessary elements from mini-map
    simplified.selectAll("text").remove();
    simplified.selectAll(".synteny-ribbon").attr("opacity", 0.2);

    miniG.node()?.appendChild(clone);

    // Draw viewport rectangle
    const viewport = miniMap.append("rect")
      .attr("class", "viewport-rect")
      .attr("x", viewportRect.x * scale)
      .attr("y", viewportRect.y * scale)
      .attr("width", viewportRect.width * scale)
      .attr("height", viewportRect.height * scale)
      .attr("fill", "none")
      .attr("stroke", "var(--primary)")
      .attr("stroke-width", 2)
      .attr("pointer-events", "none");

    // Update drag behavior to use zoomBehaviorRef
    const dragBehavior = d3.drag()
      .on("drag", (event) => {
        if (!zoomBehaviorRef.current) return;
        
        const x = event.x / scale;
        const y = event.y / scale;
        
        const transform = d3.zoomIdentity
          .translate(-x * zoom, -y * zoom)
          .scale(zoom);

        mainSvg
          .transition()
          .duration(0)
          .call(zoomBehaviorRef.current.transform, transform);
      });

    miniMap.call(dragBehavior as any);

  }, [viewportRect, zoom, dimensions]);

  return (
    <div 
      ref={containerRef}
      className={cn(
        "relative flex items-center justify-center",
        isFullscreen && "fixed inset-0 bg-background z-50"
      )}
      style={{
        width: isFullscreen ? '100vw' : dimensions.width,
        height: isFullscreen ? '100vh' : dimensions.height,
      }}
    >
      <AnimatePresence>
        {debouncedHoverInfo?.isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 5 }}
            transition={{ duration: 0.15 }}
            className="fixed z-50 px-4 py-2 text-sm bg-popover text-popover-foreground rounded-lg shadow-lg border whitespace-pre"
            style={{
              left: debouncedHoverInfo.x + 10,
              top: debouncedHoverInfo.y + 10,
              maxWidth: '300px'
            }}
          >
            {debouncedHoverInfo.content}
          </motion.div>
        )}
      </AnimatePresence>

      <div className="absolute top-4 right-4 flex gap-2 z-10">
        <div className="flex gap-2 mr-4">
          <Button
            variant={alignmentFilter === 'all' ? 'default' : 'outline'}
            onClick={() => setAlignmentFilter('all')}
            className="text-xs"
          >
            All Alignments
          </Button>
          <Button
            variant={alignmentFilter === 'forward' ? 'default' : 'outline'}
            onClick={() => setAlignmentFilter('forward')}
            className="text-xs"
          >
            Forward Only
          </Button>
          <Button
            variant={alignmentFilter === 'reverse' ? 'default' : 'outline'}
            onClick={() => setAlignmentFilter('reverse')}
            className="text-xs"
          >
            Reverse Only
          </Button>
        </div>
        <div className="flex gap-2 border-l pl-4">
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              if (!svgRef.current || !zoomBehaviorRef.current) return;
              
              d3.select(svgRef.current)
                .transition()
                .duration(750)
                .call(zoomBehaviorRef.current.scaleBy, 1.2);
            }}
          >
            <ZoomIn className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              if (!svgRef.current || !zoomBehaviorRef.current) return;
              
              d3.select(svgRef.current)
                .transition()
                .duration(750)
                .call(zoomBehaviorRef.current.scaleBy, 0.8);
            }}
          >
            <ZoomOut className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              if (!svgRef.current || !zoomBehaviorRef.current) return;
              
              d3.select(svgRef.current)
                .transition()
                .duration(750)
                .call(zoomBehaviorRef.current.transform, d3.zoomIdentity);
            }}
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={toggleFullscreen}
          >
            {isFullscreen ? (
              <Minimize2 className="h-4 w-4" />
            ) : (
              <Maximize2 className="h-4 w-4" />
            )}
          </Button>
        </div>
      </div>

      <svg
        ref={svgRef}
        width={dimensions.width}
        height={dimensions.height}
        className={cn(
          "bg-background border rounded-lg",
          isFullscreen && "max-w-[95vw] max-h-[95vh]"
        )}
        preserveAspectRatio="xMidYMid meet"
      />
      
      <div className={cn(
        "absolute bottom-4 right-4",
        isFullscreen && "z-10"
      )}>
        <svg
          ref={miniMapRef}
          width={miniMapWidth}
          height={miniMapHeight}
          className="bg-background border rounded-lg shadow-lg"
          style={{
            cursor: 'move'
          }}
        />
      </div>
      
    </div>
  );
}