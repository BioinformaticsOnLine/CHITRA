'use client'

import React, { useState, useEffect } from 'react';
import PageWrapper from "@/components/wrapper/page-wrapper";
import { ChromosomeSynteny } from './chromosome-synteny.bk';
import { MultiSelect } from '@/components/ui/multi-select';
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Moon, Sun, RefreshCw } from "lucide-react";
import * as d3 from 'd3';
import { SyntenyData, ChromosomeData, ReferenceGenomeData } from '../types';
import { useTheme } from "next-themes";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const parseCSVRow = (d: any): any => {
  return {
    ...d,
    query_start: +d.query_start,
    query_end: +d.query_end,
    ref_start: +d.ref_start,
    ref_end: +d.ref_end
  };
};

const parseChromosomeRow = (d: any): any => {
  return {
    ...d,
    chr_size_bp: +d.chr_size_bp,
    centromere_start: d.centromere_start ? +d.centromere_start : null,
    centromere_end: d.centromere_end ? +d.centromere_end : null
  };
};

export default function ChromoViz() {
  const { theme, setTheme } = useTheme();
  const [selectedSpecies, setSelectedSpecies] = useState<string[]>([]);
  const [syntenyData, setSyntenyData] = useState<SyntenyData[]>([]);
  const [referenceData, setReferenceData] = useState<ChromosomeData[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [referenceGenomeData, setReferenceGenomeData] = useState<ReferenceGenomeData | null>(null);

  // Get reference species from synteny data
  const referenceSpecies = React.useMemo(() => {
    if (syntenyData.length === 0) return null;
    return syntenyData[0].ref_species;
  }, [syntenyData]);

  // Load data
  const loadData = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const [
        syntenyResponse, 
        referenceResponse,
        refChromosomeSizes,
        refGeneAnnotations
      ] = await Promise.all([
        d3.csv('/synteny_data.csv', parseCSVRow),
        d3.csv('/species_data.csv', parseChromosomeRow),
        d3.csv('/ref_chromosome_sizes.csv'),
        d3.csv('/ref_gene_annotations.csv')
      ]);

      if (!syntenyResponse || !referenceResponse) {
        throw new Error('Failed to load data');
      }

      setSyntenyData(syntenyResponse);
      setReferenceData(referenceResponse);
      setReferenceGenomeData({
        chromosomeSizes: refChromosomeSizes,
        geneAnnotations: refGeneAnnotations
      });

    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  // Create options for the MultiSelect component
  const speciesOptions = React.useMemo(() => 
    Array.from(new Set(referenceData.map(d => d.species_name)))
      .map(species => ({
        label: species.replace('_', ' '),
        value: species,
      }))
      .sort((a, b) => a.label.localeCompare(b.label)),
    [referenceData]
  );

  // Modified filter function to handle reference species data correctly
  const filteredData = React.useMemo(() => {
    if (!referenceGenomeData || !referenceSpecies) return { referenceData, syntenyData };

    // Create reference chromosome data from ref_chromosome_sizes.csv
    const referenceChromosomes = referenceGenomeData.chromosomeSizes.map(chr => ({
      species_name: referenceSpecies,
      chr_id: chr.chromosome,
      chr_type: 'chromosome',
      chr_size_bp: +chr.size,
      centromere_start: chr.centromere_start ? +chr.centromere_start : null,
      centromere_end: chr.centromere_end ? +chr.centromere_end : null
    }));

    if (selectedSpecies.length === 0) {
      // Show all species plus reference
      return {
        referenceData: [
          ...referenceData.filter(d => d.species_name !== referenceSpecies),
          ...referenceChromosomes
        ],
        syntenyData
      };
    }

    const filteredReference = [
      ...referenceData.filter(d => 
        selectedSpecies.includes(d.species_name) && d.species_name !== referenceSpecies
      ),
      ...referenceChromosomes
    ];

    // Always put reference genome at bottom
    filteredReference.sort((a, b) => {
      if (a.species_name === referenceSpecies) return 1;
      if (b.species_name === referenceSpecies) return -1;
      return a.species_name.localeCompare(b.species_name);
    });

    const filteredSynteny = syntenyData.filter(d =>
      selectedSpecies.includes(d.query_name)
    );

    return { referenceData: filteredReference, syntenyData: filteredSynteny };
  }, [referenceData, syntenyData, selectedSpecies, referenceSpecies, referenceGenomeData]);

  if (error) {
    return (
      <PageWrapper>
        <div className="flex flex-col items-center justify-center min-h-[50vh] p-4">
          <div className="text-red-500 mb-4">{error}</div>
          <Button onClick={loadData} variant="outline">
            <RefreshCw className="mr-2 h-4 w-4" />
            Retry
          </Button>
        </div>
      </PageWrapper>
    );
  }

  return (
    <PageWrapper>
      <div className="container py-6 space-y-4">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold">ChromoViz</h1>
            <p className="text-muted-foreground">
              Interactive visualization of chromosomal synteny
            </p>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
          >
            <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
            <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          </Button>
        </div>

        <Card className="mb-6 p-4">
          <div className="flex flex-col gap-4">
            <div className="flex items-center gap-4">
              <div className="flex-grow">
                <MultiSelect
                  options={speciesOptions}
                  value={selectedSpecies}
                  onValueChange={setSelectedSpecies}
                  placeholder="Select species to compare..."
                  disabled={isLoading}
                  className="w-full"
                />
              </div>
              <Button
                variant="outline"
                onClick={() => setSelectedSpecies([])}
                disabled={selectedSpecies.length === 0 || isLoading}
              >
                Clear
              </Button>
            </div>
            
            <div className="text-sm text-muted-foreground">
              {selectedSpecies.length === 0 
                ? 'Showing all species. Select specific species to filter the visualization.'
                : `Showing synteny between ${selectedSpecies.length} selected species and ${referenceSpecies?.replace('_', ' ')}`
              }
            </div>
          </div>
        </Card>

        <Card className="mb-6">
          {isLoading ? (
            <div className="p-6 space-y-4">
              <Skeleton className="h-[800px] w-full" />
            </div>
          ) : (
            <ChromosomeSynteny
              referenceData={filteredData.referenceData}
              syntenyData={filteredData.syntenyData}
              referenceGenomeData={referenceGenomeData}
              width={1400}
              height={800}
            />
          )}
        </Card>

        <div className="text-sm text-muted-foreground text-center">
          <p>
            Hover over chromosomes and synteny ribbons for detailed information.
            Use the zoom controls to explore specific regions.
          </p>
        </div>
      </div>
    </PageWrapper>
  );
}
