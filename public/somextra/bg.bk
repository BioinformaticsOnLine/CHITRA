'use client'

import React, { useRef, useState, useEffect } from 'react';
import PageWrapper from "@/components/wrapper/page-wrapper";
import * as d3 from 'd3';
import { MultiSelect } from '@/components/ui/multi-select';

// Interfaces for our data
interface SyntenyData {
  query_name: string;
  query_chr: string;
  query_start: number;
  query_end: number;
  query_strand: string;
  ref_chr: string;
  ref_start: number;
  ref_end: number;
  ref_species: string;
  qry_lvl: string;
}

interface ChromosomeData {
  species_name: string;
  chr_id: string;
  chr_type: string;
  chr_size_bp: number;
  centromere_start: number | null;
  centromere_end: number | null;
}

export default function ChromoViz() {
  const svgRef = useRef<SVGSVGElement>(null);
  const [selectedSpecies, setSelectedSpecies] = useState<string[]>([]);
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [syntenyData, setSyntenyData] = useState<SyntenyData[]>([]);
  const [referenceData, setReferenceData] = useState<ChromosomeData[]>([]);

  useEffect(() => {
    // Load synteny data
    d3.csv<SyntenyData>('/synteny_data.csv', d3.autoType).then(data => {
      setSyntenyData(data);
    });

    // Load reference data
    d3.csv<ChromosomeData>('/reference_data.csv', d3.autoType).then(data => {
      setReferenceData(data);
    });
  }, []);

  // Create options for the MultiSelect component
  const speciesOptions = Array.from(new Set(referenceData.map(d => d.species_name)))
    .map(species => ({
      label: species,
      value: species,
    }));

  useEffect(() => {
    if (!svgRef.current || syntenyData.length === 0 || referenceData.length === 0) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove();

    const width = 1200;
    const height = 800;
    const margin = { top: 50, right: 50, bottom: 50, left: 150 };

    svg.attr('width', width).attr('height', height);

    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);

    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    // Group reference data by species
    const referenceBySpecies = d3.group(referenceData, d => d.species_name);

    // Filter species based on selection
    const filteredSpecies = selectedSpecies.length > 0
      ? Array.from(referenceBySpecies.keys()).filter(species => selectedSpecies.includes(species))
      : Array.from(referenceBySpecies.keys());

    // Calculate cumulative chromosome sizes and create a lookup for chromosome info
    const chromosomeInfo = new Map();
    filteredSpecies.forEach(species => {
      let cumulative = 0;
      const speciesChromosomes = referenceBySpecies.get(species) || [];
      speciesChromosomes.forEach(chr => {
        chromosomeInfo.set(`${species}_${chr.chr_id}`, {
          start: cumulative,
          end: cumulative + chr.chr_size_bp,
          size: chr.chr_size_bp
        });
        cumulative += chr.chr_size_bp;
      });
    });

    // Update yScale to use the maximum cumulative size
    const maxCumulativeSize = Math.max(...Array.from(chromosomeInfo.values()).map(info => info.end));
    const chromosomeGap = 10; // Gap between chromosomes in pixels
    const totalHeight = maxCumulativeSize + (chromosomeGap * (Math.max(...Array.from(referenceBySpecies.values(), chromosomes => chromosomes.length)) - 1));
    const yScale = d3.scaleLinear()
      .domain([0, totalHeight])
      .range([0, innerHeight]);

    // Create scales
    const xScale = d3.scaleBand()
      .domain(filteredSpecies)
      .range([0, innerWidth])
      .padding(0.1);

    // Color scale for species
    const colorScale = d3.scaleOrdinal(d3.schemeCategory10)
      .domain(filteredSpecies);

    // Create zoom behavior
    const zoom = d3.zoom()
      .scaleExtent([1, 10])
      .on('zoom', (event) => {
        g.attr('transform', event.transform);
      });

    svg.call(zoom as any);

    // Add a glow filter
    const defs = svg.append("defs");
    const filter = defs.append("filter")
      .attr("id", "glow");
    filter.append("feGaussianBlur")
      .attr("stdDeviation", "3.5")
      .attr("result", "coloredBlur");
    const feMerge = filter.append("feMerge");
    feMerge.append("feMergeNode")
      .attr("in", "coloredBlur");
    feMerge.append("feMergeNode")
      .attr("in", "SourceGraphic");

    // Update the chromosome drawing logic
    filteredSpecies.forEach(species => {
      const chromosomes = referenceBySpecies.get(species) || [];
      let cumulativeHeight = 0;
      
      const speciesGroup = g.append('g')
        .attr('transform', `translate(${xScale(species)!},0)`);

      chromosomes.forEach((chromosome, index) => {
        const chrInfo = chromosomeInfo.get(`${species}_${chromosome.chr_id}`);
        if (!chrInfo) return;

        const chrGroup = speciesGroup.append('g')
          .attr('transform', `translate(0,${cumulativeHeight})`);

        // Draw the main chromosome rectangle without a border
        chrGroup.append('rect')
          .attr('x', 0)
          .attr('y', 0)
          .attr('width', xScale.bandwidth())
          .attr('height', yScale(chrInfo.size))
          .attr('fill', colorScale(species))
          // Remove the stroke attribute to remove the border
          .on('mouseover', (event) => showTooltip(event, chromosome))
          .on('mouseout', hideTooltip);

        // Draw chromosome label
        chrGroup.append('text')
          .attr('x', xScale.bandwidth() / 2)
          .attr('y', yScale(chrInfo.size / 2))
          .attr('text-anchor', 'middle')
          .attr('dominant-baseline', 'middle')
          .text(chromosome.chr_id)
          .style('font-size', '10px')
          .style('fill', isDarkMode ? '#fff' : '#000')
          .style('pointer-events', 'none');

        // Update cumulative height for next chromosome
        cumulativeHeight += yScale(chrInfo.size) + chromosomeGap;
      });
    });


    // Draw synteny links
    syntenyData.forEach(link => {
      if (filteredSpecies.includes(link.ref_species) && filteredSpecies.includes(link.query_name)) {
        const sourceSpecies = link.query_name;
        const targetSpecies = link.ref_species;

        const sourceChromosomeInfo = chromosomeInfo.get(`${sourceSpecies}_${link.query_chr}`);
        const targetChromosomeInfo = chromosomeInfo.get(`${targetSpecies}_${link.ref_chr}`);

        if (sourceChromosomeInfo && targetChromosomeInfo) {
          const sourceX = xScale(sourceSpecies)!;
          const targetX = xScale(targetSpecies)!;

          // Calculate vertical offset based on chromosome position
          const sourceChromosomes = referenceBySpecies.get(sourceSpecies) || [];
          const targetChromosomes = referenceBySpecies.get(targetSpecies) || [];
          
          const sourceOffset = sourceChromosomes.findIndex(chr => chr.chr_id === link.query_chr) * chromosomeGap;
          const targetOffset = targetChromosomes.findIndex(chr => chr.chr_id === link.ref_chr) * chromosomeGap;

          // Calculate precise positions for source and target
          const sourceYStart = yScale(sourceChromosomeInfo.start + link.query_start) + sourceOffset;
          const sourceYEnd = yScale(sourceChromosomeInfo.start + link.query_end) + sourceOffset;
          const targetYStart = yScale(targetChromosomeInfo.start + link.ref_start) + targetOffset;
          const targetYEnd = yScale(targetChromosomeInfo.start + link.ref_end) + targetOffset;

          // Draw matching region block on the source chromosome
          const sourceBlock = g.append('rect')
            .attr('x', sourceX)
            .attr('y', sourceYStart)
            .attr('width', xScale.bandwidth())
            .attr('height', sourceYEnd - sourceYStart)
            .attr('fill', 'yellow')
            .attr('opacity', 0.5);

          // Draw matching region block on the target chromosome
          const targetBlock = g.append('rect')
            .attr('x', targetX)
            .attr('y', targetYStart)
            .attr('width', xScale.bandwidth())
            .attr('height', targetYEnd - targetYStart)
            .attr('fill', 'yellow')
            .attr('opacity', 0.5);

          // Updated ribbon path
          const path = d3.path();
          const sourceEdge = sourceX + xScale.bandwidth();
          const targetEdge = targetX;

          path.moveTo(sourceEdge, sourceYStart);
          path.bezierCurveTo(
            (sourceEdge + targetEdge) / 2, sourceYStart,
            (sourceEdge + targetEdge) / 2, targetYStart,
            targetEdge, targetYStart
          );
          path.lineTo(targetEdge, targetYEnd);
          path.bezierCurveTo(
            (sourceEdge + targetEdge) / 2, targetYEnd,
            (sourceEdge + targetEdge) / 2, sourceYEnd,
            sourceEdge, sourceYEnd
          );
          path.closePath();

          const ribbon = g.append('path')
            .attr('d', path.toString())
            .attr('fill', colorScale(sourceSpecies))
            .attr('opacity', 0.2)
            .attr('stroke', colorScale(sourceSpecies))
            .attr('stroke-opacity', 0.5);

          // Add hover effects
          [sourceBlock, targetBlock, ribbon].forEach(element => {
            element.on('mouseover', function(event) {
              sourceBlock.attr('opacity', 0.8);
              targetBlock.attr('opacity', 0.8);
              ribbon
                .attr('opacity', 0.4)
                .attr('stroke-opacity', 1);
              showTooltip(event, link);
            })
            element.on('mouseout', function() {
              sourceBlock.attr('opacity', 0.5);
              targetBlock.attr('opacity', 0.5);
              ribbon
                .attr('opacity', 0.2)
                .attr('stroke-opacity', 0.5);
              hideTooltip();
            });
          });
        }
      }
    });


    // Add species labels
    g.selectAll('.species-label')
      .data(filteredSpecies)
      .enter()
      .append('text')
      .attr('class', 'species-label')
      .attr('x', d => xScale(d)! + xScale.bandwidth() / 2)
      .attr('y', -20)
      .attr('text-anchor', 'middle')
      .text(d => d)
      .style('font-weight', 'bold')
      .style('font-size', '14px')
      .style('fill', isDarkMode ? '#fff' : '#000');

    // Tooltip
    const tooltip = d3.select('body').append('div')
      .attr('class', 'tooltip')
      .style('position', 'absolute')
      .style('visibility', 'hidden')
      .style('background-color', isDarkMode ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.8)')
      .style('color', isDarkMode ? '#fff' : '#000')
      .style('padding', '10px')
      .style('border-radius', '5px')
      .style('box-shadow', '0 0 10px rgba(0,0,0,0.25)')
      .style('pointer-events', 'none')
      .style('font-size', '12px')
      .style('max-width', '250px');

    function showTooltip(event: MouseEvent, d: any) {
      tooltip.style('visibility', 'visible')
        .html(() => {
          if ('chr_id' in d) {
            return `Species: ${d.species_name}<br>Chromosome: ${d.chr_id}<br>Size: ${d.chr_size_bp.toLocaleString()} bp`;
          } else {
            return `Reference: ${d.ref_species} ${d.ref_chr} (${d.ref_start}-${d.ref_end})<br>Query: ${d.query_name} ${d.query_chr} (${d.query_start}-${d.query_end})`;
          }
        })
        .style('left', (event.pageX + 10) + 'px')
        .style('top', (event.pageY - 10) + 'px');
    }

    function hideTooltip() {
      tooltip.style('visibility', 'hidden');
    }

  }, [syntenyData, referenceData, selectedSpecies, isDarkMode]);

  const handleSpeciesChange = (newSelectedSpecies: string[]) => {
    setSelectedSpecies(newSelectedSpecies);
  };

  return (
    <PageWrapper>
      <div className={`container mx-auto px-4 py-8 ${isDarkMode ? 'bg-gray-800 text-white' : 'bg-white text-black'}`}>
        <h1 className="text-3xl font-bold mb-6 text-center">ChromoViz</h1>
        <p className="text-lg mb-8 text-center">
          Visualize synteny between species and Homo sapiens chromosomes.
        </p>
        <div className="mb-4 flex justify-center"> {/* Added flex and justify-center */}
          <MultiSelect
            options={speciesOptions}
            onValueChange={handleSpeciesChange}
            placeholder="Select species"
            className="w-full max-w-2xl" // Increased max-width to 2xl (42rem / 672px)
          />
        </div>
        <div className={`rounded-lg shadow-lg p-6 ${isDarkMode ? 'bg-gray-700' : 'bg-white'}`}>
          <svg ref={svgRef}></svg>
        </div>
        <button 
          onClick={() => setIsDarkMode(!isDarkMode)} 
          className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Toggle Dark Mode
        </button>
      </div>
    </PageWrapper>
  );
}
